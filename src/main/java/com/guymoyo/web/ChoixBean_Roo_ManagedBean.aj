// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.web;

import com.guymoyo.domain.Choix;
import com.guymoyo.domain.Panier;
import com.guymoyo.domain.Paris;
import com.guymoyo.service.ChoixService;
import com.guymoyo.service.PanierService;
import com.guymoyo.service.PariseService;
import com.guymoyo.web.ChoixBean;
import com.guymoyo.web.converter.PanierConverter;
import com.guymoyo.web.converter.ParisConverter;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect ChoixBean_Roo_ManagedBean {
    
    declare @type: ChoixBean: @ManagedBean(name = "choixBean");
    
    declare @type: ChoixBean: @SessionScoped;
    
    @Autowired
    ChoixService ChoixBean.choixService;
    
    @Autowired
    PariseService ChoixBean.pariseService;
    
    @Autowired
    PanierService ChoixBean.panierService;
    
    private String ChoixBean.name = "Choixes";
    
    private Choix ChoixBean.choix;
    
    private List<Choix> ChoixBean.allChoixes;
    
    private boolean ChoixBean.dataVisible = false;
    
    private List<String> ChoixBean.columns;
    
    private HtmlPanelGrid ChoixBean.createPanelGrid;
    
    private HtmlPanelGrid ChoixBean.editPanelGrid;
    
    private HtmlPanelGrid ChoixBean.viewPanelGrid;
    
    private boolean ChoixBean.createDialogVisible = false;
    
    @PostConstruct
    public void ChoixBean.init() {
        columns = new ArrayList<String>();
        columns.add("montantParis");
        columns.add("gain");
    }
    
    public String ChoixBean.getName() {
        return name;
    }
    
    public List<String> ChoixBean.getColumns() {
        return columns;
    }
    
    public List<Choix> ChoixBean.getAllChoixes() {
        return allChoixes;
    }
    
    public void ChoixBean.setAllChoixes(List<Choix> allChoixes) {
        this.allChoixes = allChoixes;
    }
    
    public String ChoixBean.findAllChoixes() {
        allChoixes = choixService.findAllChoixes();
        dataVisible = !allChoixes.isEmpty();
        return null;
    }
    
    public boolean ChoixBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ChoixBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ChoixBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ChoixBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ChoixBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ChoixBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ChoixBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ChoixBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ChoixBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText parisCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parisCreateOutput.setId("parisCreateOutput");
        parisCreateOutput.setValue("Paris:   ");
        htmlPanelGrid.getChildren().add(parisCreateOutput);
        
        AutoComplete parisCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        parisCreateInput.setId("parisCreateInput");
        parisCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.paris}", Paris.class));
        parisCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{choixBean.completeParis}", List.class, new Class[] { String.class }));
        parisCreateInput.setDropdown(true);
        parisCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paris", String.class));
        parisCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paris.dateOfCreation} #{paris.dateOfClose} #{paris.cote}", String.class));
        parisCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paris}", Paris.class));
        parisCreateInput.setConverter(new ParisConverter());
        parisCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(parisCreateInput);
        
        Message parisCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parisCreateInputMessage.setId("parisCreateInputMessage");
        parisCreateInputMessage.setFor("parisCreateInput");
        parisCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parisCreateInputMessage);
        
        HtmlOutputText montantParisCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        montantParisCreateOutput.setId("montantParisCreateOutput");
        montantParisCreateOutput.setValue("Montant Paris: * ");
        htmlPanelGrid.getChildren().add(montantParisCreateOutput);
        
        InputText montantParisCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        montantParisCreateInput.setId("montantParisCreateInput");
        montantParisCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.montantParis}", BigDecimal.class));
        montantParisCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(montantParisCreateInput);
        
        Message montantParisCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        montantParisCreateInputMessage.setId("montantParisCreateInputMessage");
        montantParisCreateInputMessage.setFor("montantParisCreateInput");
        montantParisCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(montantParisCreateInputMessage);
        
        HtmlOutputText gainCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gainCreateOutput.setId("gainCreateOutput");
        gainCreateOutput.setValue("Gain: * ");
        htmlPanelGrid.getChildren().add(gainCreateOutput);
        
        InputText gainCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        gainCreateInput.setId("gainCreateInput");
        gainCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.gain}", BigDecimal.class));
        gainCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(gainCreateInput);
        
        Message gainCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        gainCreateInputMessage.setId("gainCreateInputMessage");
        gainCreateInputMessage.setFor("gainCreateInput");
        gainCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(gainCreateInputMessage);
        
        HtmlOutputText panierCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        panierCreateOutput.setId("panierCreateOutput");
        panierCreateOutput.setValue("Panier:   ");
        htmlPanelGrid.getChildren().add(panierCreateOutput);
        
        AutoComplete panierCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        panierCreateInput.setId("panierCreateInput");
        panierCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.panier}", Panier.class));
        panierCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{choixBean.completePanier}", List.class, new Class[] { String.class }));
        panierCreateInput.setDropdown(true);
        panierCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "panier", String.class));
        panierCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{panier.dateOfCreation} #{panier.montantTotal} #{panier.gainTotal} #{panier.nbreItem}", String.class));
        panierCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{panier}", Panier.class));
        panierCreateInput.setConverter(new PanierConverter());
        panierCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(panierCreateInput);
        
        Message panierCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        panierCreateInputMessage.setId("panierCreateInputMessage");
        panierCreateInputMessage.setFor("panierCreateInput");
        panierCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(panierCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ChoixBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText parisEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parisEditOutput.setId("parisEditOutput");
        parisEditOutput.setValue("Paris:   ");
        htmlPanelGrid.getChildren().add(parisEditOutput);
        
        AutoComplete parisEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        parisEditInput.setId("parisEditInput");
        parisEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.paris}", Paris.class));
        parisEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{choixBean.completeParis}", List.class, new Class[] { String.class }));
        parisEditInput.setDropdown(true);
        parisEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paris", String.class));
        parisEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paris.dateOfCreation} #{paris.dateOfClose} #{paris.cote}", String.class));
        parisEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paris}", Paris.class));
        parisEditInput.setConverter(new ParisConverter());
        parisEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(parisEditInput);
        
        Message parisEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parisEditInputMessage.setId("parisEditInputMessage");
        parisEditInputMessage.setFor("parisEditInput");
        parisEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parisEditInputMessage);
        
        HtmlOutputText montantParisEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        montantParisEditOutput.setId("montantParisEditOutput");
        montantParisEditOutput.setValue("Montant Paris: * ");
        htmlPanelGrid.getChildren().add(montantParisEditOutput);
        
        InputText montantParisEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        montantParisEditInput.setId("montantParisEditInput");
        montantParisEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.montantParis}", BigDecimal.class));
        montantParisEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(montantParisEditInput);
        
        Message montantParisEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        montantParisEditInputMessage.setId("montantParisEditInputMessage");
        montantParisEditInputMessage.setFor("montantParisEditInput");
        montantParisEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(montantParisEditInputMessage);
        
        HtmlOutputText gainEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gainEditOutput.setId("gainEditOutput");
        gainEditOutput.setValue("Gain: * ");
        htmlPanelGrid.getChildren().add(gainEditOutput);
        
        InputText gainEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        gainEditInput.setId("gainEditInput");
        gainEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.gain}", BigDecimal.class));
        gainEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(gainEditInput);
        
        Message gainEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        gainEditInputMessage.setId("gainEditInputMessage");
        gainEditInputMessage.setFor("gainEditInput");
        gainEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(gainEditInputMessage);
        
        HtmlOutputText panierEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        panierEditOutput.setId("panierEditOutput");
        panierEditOutput.setValue("Panier:   ");
        htmlPanelGrid.getChildren().add(panierEditOutput);
        
        AutoComplete panierEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        panierEditInput.setId("panierEditInput");
        panierEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.panier}", Panier.class));
        panierEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{choixBean.completePanier}", List.class, new Class[] { String.class }));
        panierEditInput.setDropdown(true);
        panierEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "panier", String.class));
        panierEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{panier.dateOfCreation} #{panier.montantTotal} #{panier.gainTotal} #{panier.nbreItem}", String.class));
        panierEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{panier}", Panier.class));
        panierEditInput.setConverter(new PanierConverter());
        panierEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(panierEditInput);
        
        Message panierEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        panierEditInputMessage.setId("panierEditInputMessage");
        panierEditInputMessage.setFor("panierEditInput");
        panierEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(panierEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ChoixBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText parisLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parisLabel.setId("parisLabel");
        parisLabel.setValue("Paris:   ");
        htmlPanelGrid.getChildren().add(parisLabel);
        
        HtmlOutputText parisValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parisValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.paris}", Paris.class));
        parisValue.setConverter(new ParisConverter());
        htmlPanelGrid.getChildren().add(parisValue);
        
        HtmlOutputText montantParisLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        montantParisLabel.setId("montantParisLabel");
        montantParisLabel.setValue("Montant Paris:   ");
        htmlPanelGrid.getChildren().add(montantParisLabel);
        
        HtmlOutputText montantParisValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        montantParisValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.montantParis}", String.class));
        htmlPanelGrid.getChildren().add(montantParisValue);
        
        HtmlOutputText gainLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gainLabel.setId("gainLabel");
        gainLabel.setValue("Gain:   ");
        htmlPanelGrid.getChildren().add(gainLabel);
        
        HtmlOutputText gainValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        gainValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.gain}", String.class));
        htmlPanelGrid.getChildren().add(gainValue);
        
        HtmlOutputText panierLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        panierLabel.setId("panierLabel");
        panierLabel.setValue("Panier:   ");
        htmlPanelGrid.getChildren().add(panierLabel);
        
        HtmlOutputText panierValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        panierValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{choixBean.choix.panier}", Panier.class));
        panierValue.setConverter(new PanierConverter());
        htmlPanelGrid.getChildren().add(panierValue);
        
        return htmlPanelGrid;
    }
    
    public Choix ChoixBean.getChoix() {
        if (choix == null) {
            choix = new Choix();
        }
        return choix;
    }
    
    public void ChoixBean.setChoix(Choix choix) {
        this.choix = choix;
    }
    
    public List<Paris> ChoixBean.completeParis(String query) {
        List<Paris> suggestions = new ArrayList<Paris>();
        for (Paris paris : pariseService.findAllParises()) {
            String parisStr = String.valueOf(paris.getDateOfCreation() +  " "  + paris.getDateOfClose() +  " "  + paris.getCote());
            if (parisStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(paris);
            }
        }
        return suggestions;
    }
    
    public List<Panier> ChoixBean.completePanier(String query) {
        List<Panier> suggestions = new ArrayList<Panier>();
        for (Panier panier : panierService.findAllPaniers()) {
            String panierStr = String.valueOf(panier.getDateOfCreation() +  " "  + panier.getMontantTotal() +  " "  + panier.getGainTotal() +  " "  + panier.getNbreItem());
            if (panierStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(panier);
            }
        }
        return suggestions;
    }
    
    public String ChoixBean.onEdit() {
        return null;
    }
    
    public boolean ChoixBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ChoixBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ChoixBean.displayList() {
        createDialogVisible = false;
        findAllChoixes();
        return "choix";
    }
    
    public String ChoixBean.displayCreateDialog() {
        choix = new Choix();
        createDialogVisible = true;
        return "choix";
    }
    
    public String ChoixBean.persist() {
        String message = "";
        if (choix.getId() != null) {
            choixService.updateChoix(choix);
            message = "Successfully updated";
        } else {
            choixService.saveChoix(choix);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllChoixes();
    }
    
    public String ChoixBean.delete() {
        choixService.deleteChoix(choix);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllChoixes();
    }
    
    public void ChoixBean.reset() {
        choix = null;
        createDialogVisible = false;
    }
    
    public void ChoixBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
