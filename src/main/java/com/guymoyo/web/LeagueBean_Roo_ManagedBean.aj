// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.web;

import com.guymoyo.domain.League;
import com.guymoyo.domain.UserAccount;
import com.guymoyo.service.LeagueService;
import com.guymoyo.service.UserAccountService;
import com.guymoyo.web.LeagueBean;
import com.guymoyo.web.converter.UserAccountConverter;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.component.filedownload.FileDownloadActionListener;
import org.primefaces.component.fileupload.FileUpload;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect LeagueBean_Roo_ManagedBean {
    
    declare @type: LeagueBean: @ManagedBean(name = "leagueBean");
    
    declare @type: LeagueBean: @SessionScoped;
    
    @Autowired
    LeagueService LeagueBean.leagueService;
    
    @Autowired
    UserAccountService LeagueBean.userAccountService;
    
    private String LeagueBean.name = "Leagues";
    
    private League LeagueBean.league;
    
    private List<League> LeagueBean.allLeagues;
    
    private boolean LeagueBean.dataVisible = false;
    
    private List<String> LeagueBean.columns;
    
    private HtmlPanelGrid LeagueBean.createPanelGrid;
    
    private HtmlPanelGrid LeagueBean.editPanelGrid;
    
    private HtmlPanelGrid LeagueBean.viewPanelGrid;
    
    private boolean LeagueBean.createDialogVisible = false;
    
    @PostConstruct
    public void LeagueBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("description");
    }
    
    public String LeagueBean.getName() {
        return name;
    }
    
    public List<String> LeagueBean.getColumns() {
        return columns;
    }
    
    public List<League> LeagueBean.getAllLeagues() {
        return allLeagues;
    }
    
    public void LeagueBean.setAllLeagues(List<League> allLeagues) {
        this.allLeagues = allLeagues;
    }
    
    public String LeagueBean.findAllLeagues() {
        allLeagues = leagueService.findAllLeagues();
        dataVisible = !allLeagues.isEmpty();
        return null;
    }
    
    public boolean LeagueBean.isDataVisible() {
        return dataVisible;
    }
    
    public void LeagueBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid LeagueBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void LeagueBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid LeagueBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void LeagueBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid LeagueBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void LeagueBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid LeagueBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.name}", String.class));
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText descriptionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description: * ");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputTextarea descriptionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.description}", String.class));
        LengthValidator descriptionCreateInputValidator = new LengthValidator();
        descriptionCreateInputValidator.setMaximum(255);
        descriptionCreateInput.addValidator(descriptionCreateInputValidator);
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        HtmlOutputText imageCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imageCreateOutput.setId("imageCreateOutput");
        imageCreateOutput.setValue("Image:   ");
        htmlPanelGrid.getChildren().add(imageCreateOutput);
        
        FileUpload imageCreateInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        imageCreateInput.setId("imageCreateInput");
        imageCreateInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{leagueBean.handleFileUploadForImage}", void.class, new Class[] { FileUploadEvent.class }));
        imageCreateInput.setMode("advanced");
        imageCreateInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        imageCreateInput.setUpdate(":growlForm:growl");
        htmlPanelGrid.getChildren().add(imageCreateInput);
        
        Message imageCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imageCreateInputMessage.setId("imageCreateInputMessage");
        imageCreateInputMessage.setFor("imageCreateInput");
        imageCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imageCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.createdBy}", UserAccount.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{leagueBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.username} #{createdBy.password} #{createdBy.firstName} #{createdBy.lastName}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", UserAccount.class));
        createdByCreateInput.setConverter(new UserAccountConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LeagueBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.name}", String.class));
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText descriptionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description: * ");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputTextarea descriptionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.description}", String.class));
        LengthValidator descriptionEditInputValidator = new LengthValidator();
        descriptionEditInputValidator.setMaximum(255);
        descriptionEditInput.addValidator(descriptionEditInputValidator);
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        HtmlOutputText imageEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imageEditOutput.setId("imageEditOutput");
        imageEditOutput.setValue("Image:   ");
        htmlPanelGrid.getChildren().add(imageEditOutput);
        
        FileUpload imageEditInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        imageEditInput.setId("imageEditInput");
        imageEditInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{leagueBean.handleFileUploadForImage}", void.class, new Class[] { FileUploadEvent.class }));
        imageEditInput.setMode("advanced");
        imageEditInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        imageEditInput.setUpdate(":growlForm:growl");
        htmlPanelGrid.getChildren().add(imageEditInput);
        
        Message imageEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imageEditInputMessage.setId("imageEditInputMessage");
        imageEditInputMessage.setFor("imageEditInput");
        imageEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imageEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.createdBy}", UserAccount.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{leagueBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.username} #{createdBy.password} #{createdBy.firstName} #{createdBy.lastName}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", UserAccount.class));
        createdByEditInput.setConverter(new UserAccountConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LeagueBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:   ");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        InputTextarea descriptionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.description}", String.class));
        descriptionValue.setReadonly(true);
        descriptionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText imageLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imageLabel.setId("imageLabel");
        imageLabel.setValue("Image:   ");
        htmlPanelGrid.getChildren().add(imageLabel);
        
        UIComponent imageValue;
        if (league != null && league.getImage() != null && league.getImage().length > 0) {
            imageValue = (CommandButton) application.createComponent(CommandButton.COMPONENT_TYPE);
            ((CommandButton) imageValue).addActionListener(new FileDownloadActionListener(expressionFactory.createValueExpression(elContext, "#{leagueBean.imageStreamedContent}", StreamedContent.class), null));
            ((CommandButton) imageValue).setValue("Download");
            ((CommandButton) imageValue).setAjax(false);
        } else {
            imageValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
            ((HtmlOutputText) imageValue).setValue("");
        }
        htmlPanelGrid.getChildren().add(imageValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{leagueBean.league.createdBy}", UserAccount.class));
        createdByValue.setConverter(new UserAccountConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        return htmlPanelGrid;
    }
    
    public League LeagueBean.getLeague() {
        if (league == null) {
            league = new League();
        }
        return league;
    }
    
    public void LeagueBean.setLeague(League league) {
        this.league = league;
    }
    
    public void LeagueBean.handleFileUploadForImage(FileUploadEvent event) {
        league.setImage(event.getFile().getContents());
        FacesMessage facesMessage = new FacesMessage("Successful", event.getFile().getFileName() + " is uploaded.");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
    }
    
    public StreamedContent LeagueBean.getImageStreamedContent() {
        if (league != null && league.getImage() != null) {
            return new DefaultStreamedContent(new ByteArrayInputStream(league.getImage()), "image/jpeg", "image.jpg");
        }
        return new DefaultStreamedContent(new ByteArrayInputStream("".getBytes()));
    }
    
    public List<UserAccount> LeagueBean.completeCreatedBy(String query) {
        List<UserAccount> suggestions = new ArrayList<UserAccount>();
        for (UserAccount userAccount : userAccountService.findAllUserAccounts()) {
            String userAccountStr = String.valueOf(userAccount.getUsername() +  " "  + userAccount.getPassword() +  " "  + userAccount.getFirstName() +  " "  + userAccount.getLastName());
            if (userAccountStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(userAccount);
            }
        }
        return suggestions;
    }
    
    public String LeagueBean.onEdit() {
        return null;
    }
    
    public boolean LeagueBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void LeagueBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String LeagueBean.displayList() {
        createDialogVisible = false;
        findAllLeagues();
        return "league";
    }
    
    public String LeagueBean.displayCreateDialog() {
        league = new League();
        createDialogVisible = true;
        return "league";
    }
    
    public String LeagueBean.persist() {
        String message = "";
        if (league.getId() != null) {
            leagueService.updateLeague(league);
            message = "Successfully updated";
        } else {
            leagueService.saveLeague(league);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLeagues();
    }
    
    public String LeagueBean.delete() {
        leagueService.deleteLeague(league);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLeagues();
    }
    
    public void LeagueBean.reset() {
        league = null;
        createDialogVisible = false;
    }
    
    public void LeagueBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
