// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.web;

import com.guymoyo.domain.Gender;
import com.guymoyo.domain.RoleName;
import com.guymoyo.domain.UserAccount;
import com.guymoyo.service.UserAccountService;
import com.guymoyo.web.UserAccountBean;
import java.io.ByteArrayInputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.component.filedownload.FileDownloadActionListener;
import org.primefaces.component.fileupload.FileUpload;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect UserAccountBean_Roo_ManagedBean {
    
    declare @type: UserAccountBean: @ManagedBean(name = "userAccountBean");
    
    declare @type: UserAccountBean: @SessionScoped;
    
    @Autowired
    UserAccountService UserAccountBean.userAccountService;
    
    private String UserAccountBean.name = "UserAccounts";
    
    private UserAccount UserAccountBean.userAccount;
    
    private List<UserAccount> UserAccountBean.allUserAccounts;
    
    private boolean UserAccountBean.dataVisible = false;
    
    private List<String> UserAccountBean.columns;
    
    private HtmlPanelGrid UserAccountBean.createPanelGrid;
    
    private HtmlPanelGrid UserAccountBean.editPanelGrid;
    
    private HtmlPanelGrid UserAccountBean.viewPanelGrid;
    
    private boolean UserAccountBean.createDialogVisible = false;
    
    @PostConstruct
    public void UserAccountBean.init() {
        columns = new ArrayList<String>();
        columns.add("username");
        columns.add("password");
        columns.add("firstName");
        columns.add("lastName");
        columns.add("fullName");
    }
    
    public String UserAccountBean.getName() {
        return name;
    }
    
    public List<String> UserAccountBean.getColumns() {
        return columns;
    }
    
    public List<UserAccount> UserAccountBean.getAllUserAccounts() {
        return allUserAccounts;
    }
    
    public void UserAccountBean.setAllUserAccounts(List<UserAccount> allUserAccounts) {
        this.allUserAccounts = allUserAccounts;
    }
    
    public String UserAccountBean.findAllUserAccounts() {
        allUserAccounts = userAccountService.findAllUserAccounts();
        dataVisible = !allUserAccounts.isEmpty();
        return null;
    }
    
    public boolean UserAccountBean.isDataVisible() {
        return dataVisible;
    }
    
    public void UserAccountBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid UserAccountBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void UserAccountBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid UserAccountBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void UserAccountBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid UserAccountBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void UserAccountBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid UserAccountBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usernameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameCreateOutput.setId("usernameCreateOutput");
        usernameCreateOutput.setValue("Username: * ");
        htmlPanelGrid.getChildren().add(usernameCreateOutput);
        
        InputText usernameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameCreateInput.setId("usernameCreateInput");
        usernameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.username}", String.class));
        LengthValidator usernameCreateInputValidator = new LengthValidator();
        usernameCreateInputValidator.setMinimum(3);
        usernameCreateInput.addValidator(usernameCreateInputValidator);
        usernameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(usernameCreateInput);
        
        Message usernameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameCreateInputMessage.setId("usernameCreateInputMessage");
        usernameCreateInputMessage.setFor("usernameCreateInput");
        usernameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameCreateInputMessage);
        
        HtmlOutputText passwordCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password: * ");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputText passwordCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.password}", String.class));
        LengthValidator passwordCreateInputValidator = new LengthValidator();
        passwordCreateInputValidator.setMinimum(5);
        passwordCreateInput.addValidator(passwordCreateInputValidator);
        passwordCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        HtmlOutputText rolesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesCreateOutput.setId("rolesCreateOutput");
        rolesCreateOutput.setValue("Roles: * ");
        htmlPanelGrid.getChildren().add(rolesCreateOutput);
        
        AutoComplete rolesCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        rolesCreateInput.setId("rolesCreateInput");
        rolesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.roles}", RoleName.class));
        rolesCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userAccountBean.completeRoles}", List.class, new Class[] { String.class }));
        rolesCreateInput.setDropdown(true);
        rolesCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(rolesCreateInput);
        
        Message rolesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolesCreateInputMessage.setId("rolesCreateInputMessage");
        rolesCreateInputMessage.setFor("rolesCreateInput");
        rolesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolesCreateInputMessage);
        
        HtmlOutputText firstNameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameCreateOutput.setId("firstNameCreateOutput");
        firstNameCreateOutput.setValue("First Name:   ");
        htmlPanelGrid.getChildren().add(firstNameCreateOutput);
        
        InputText firstNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstNameCreateInput.setId("firstNameCreateInput");
        firstNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.firstName}", String.class));
        htmlPanelGrid.getChildren().add(firstNameCreateInput);
        
        Message firstNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameCreateInputMessage.setId("firstNameCreateInputMessage");
        firstNameCreateInputMessage.setFor("firstNameCreateInput");
        firstNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameCreateInputMessage);
        
        HtmlOutputText lastNameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameCreateOutput.setId("lastNameCreateOutput");
        lastNameCreateOutput.setValue("Last Name: * ");
        htmlPanelGrid.getChildren().add(lastNameCreateOutput);
        
        InputText lastNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastNameCreateInput.setId("lastNameCreateInput");
        lastNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.lastName}", String.class));
        htmlPanelGrid.getChildren().add(lastNameCreateInput);
        
        Message lastNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameCreateInputMessage.setId("lastNameCreateInputMessage");
        lastNameCreateInputMessage.setFor("lastNameCreateInput");
        lastNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameCreateInputMessage);
        
        HtmlOutputText fullNameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fullNameCreateOutput.setId("fullNameCreateOutput");
        fullNameCreateOutput.setValue("Full Name:   ");
        htmlPanelGrid.getChildren().add(fullNameCreateOutput);
        
        InputText fullNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        fullNameCreateInput.setId("fullNameCreateInput");
        fullNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.fullName}", String.class));
        htmlPanelGrid.getChildren().add(fullNameCreateInput);
        
        Message fullNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fullNameCreateInputMessage.setId("fullNameCreateInputMessage");
        fullNameCreateInputMessage.setFor("fullNameCreateInput");
        fullNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fullNameCreateInputMessage);
        
        HtmlOutputText accountCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountCreateOutput.setId("accountCreateOutput");
        accountCreateOutput.setValue("Account:   ");
        htmlPanelGrid.getChildren().add(accountCreateOutput);
        
        InputText accountCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        accountCreateInput.setId("accountCreateInput");
        accountCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.account}", BigDecimal.class));
        accountCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(accountCreateInput);
        
        Message accountCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        accountCreateInputMessage.setId("accountCreateInputMessage");
        accountCreateInputMessage.setFor("accountCreateInput");
        accountCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(accountCreateInputMessage);
        
        HtmlOutputText genderCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderCreateOutput.setId("genderCreateOutput");
        genderCreateOutput.setValue("Gender:   ");
        htmlPanelGrid.getChildren().add(genderCreateOutput);
        
        AutoComplete genderCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        genderCreateInput.setId("genderCreateInput");
        genderCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.gender}", Gender.class));
        genderCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userAccountBean.completeGender}", List.class, new Class[] { String.class }));
        genderCreateInput.setDropdown(true);
        genderCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(genderCreateInput);
        
        Message genderCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        genderCreateInputMessage.setId("genderCreateInputMessage");
        genderCreateInputMessage.setFor("genderCreateInput");
        genderCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(genderCreateInputMessage);
        
        HtmlOutputText identityNumberCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identityNumberCreateOutput.setId("identityNumberCreateOutput");
        identityNumberCreateOutput.setValue("Identity Number:   ");
        htmlPanelGrid.getChildren().add(identityNumberCreateOutput);
        
        InputText identityNumberCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identityNumberCreateInput.setId("identityNumberCreateInput");
        identityNumberCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.identityNumber}", String.class));
        htmlPanelGrid.getChildren().add(identityNumberCreateInput);
        
        Message identityNumberCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identityNumberCreateInputMessage.setId("identityNumberCreateInputMessage");
        identityNumberCreateInputMessage.setFor("identityNumberCreateInput");
        identityNumberCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identityNumberCreateInputMessage);
        
        HtmlOutputText phoneNumberCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phoneNumberCreateOutput.setId("phoneNumberCreateOutput");
        phoneNumberCreateOutput.setValue("Phone Number:   ");
        htmlPanelGrid.getChildren().add(phoneNumberCreateOutput);
        
        InputText phoneNumberCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        phoneNumberCreateInput.setId("phoneNumberCreateInput");
        phoneNumberCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.phoneNumber}", String.class));
        htmlPanelGrid.getChildren().add(phoneNumberCreateInput);
        
        Message phoneNumberCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        phoneNumberCreateInputMessage.setId("phoneNumberCreateInputMessage");
        phoneNumberCreateInputMessage.setFor("phoneNumberCreateInput");
        phoneNumberCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(phoneNumberCreateInputMessage);
        
        HtmlOutputText emailCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.email}", String.class));
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        HtmlOutputText nationalityCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityCreateOutput.setId("nationalityCreateOutput");
        nationalityCreateOutput.setValue("Nationality:   ");
        htmlPanelGrid.getChildren().add(nationalityCreateOutput);
        
        InputText nationalityCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nationalityCreateInput.setId("nationalityCreateInput");
        nationalityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.nationality}", String.class));
        htmlPanelGrid.getChildren().add(nationalityCreateInput);
        
        Message nationalityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityCreateInputMessage.setId("nationalityCreateInputMessage");
        nationalityCreateInputMessage.setFor("nationalityCreateInput");
        nationalityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityCreateInputMessage);
        
        HtmlOutputText professionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        professionCreateOutput.setId("professionCreateOutput");
        professionCreateOutput.setValue("Profession:   ");
        htmlPanelGrid.getChildren().add(professionCreateOutput);
        
        InputText professionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        professionCreateInput.setId("professionCreateInput");
        professionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.profession}", String.class));
        htmlPanelGrid.getChildren().add(professionCreateInput);
        
        Message professionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        professionCreateInputMessage.setId("professionCreateInputMessage");
        professionCreateInputMessage.setFor("professionCreateInput");
        professionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(professionCreateInputMessage);
        
        HtmlOutputText imageCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imageCreateOutput.setId("imageCreateOutput");
        imageCreateOutput.setValue("Image:   ");
        htmlPanelGrid.getChildren().add(imageCreateOutput);
        
        FileUpload imageCreateInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        imageCreateInput.setId("imageCreateInput");
        imageCreateInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{userAccountBean.handleFileUploadForImage}", void.class, new Class[] { FileUploadEvent.class }));
        imageCreateInput.setMode("advanced");
        imageCreateInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        imageCreateInput.setUpdate(":growlForm:growl");
        htmlPanelGrid.getChildren().add(imageCreateInput);
        
        Message imageCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imageCreateInputMessage.setId("imageCreateInputMessage");
        imageCreateInputMessage.setFor("imageCreateInput");
        imageCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imageCreateInputMessage);
        
        HtmlOutputText blackListCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        blackListCreateOutput.setId("blackListCreateOutput");
        blackListCreateOutput.setValue("Black List:   ");
        htmlPanelGrid.getChildren().add(blackListCreateOutput);
        
        SelectBooleanCheckbox blackListCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        blackListCreateInput.setId("blackListCreateInput");
        blackListCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.blackList}", Boolean.class));
        blackListCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(blackListCreateInput);
        
        Message blackListCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        blackListCreateInputMessage.setId("blackListCreateInputMessage");
        blackListCreateInputMessage.setFor("blackListCreateInput");
        blackListCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(blackListCreateInputMessage);
        
        HtmlOutputText entryDateCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        entryDateCreateOutput.setId("entryDateCreateOutput");
        entryDateCreateOutput.setValue("Entry Date: * ");
        htmlPanelGrid.getChildren().add(entryDateCreateOutput);
        
        Calendar entryDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        entryDateCreateInput.setId("entryDateCreateInput");
        entryDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.entryDate}", Date.class));
        entryDateCreateInput.setNavigator(true);
        entryDateCreateInput.setEffect("slideDown");
        entryDateCreateInput.setPattern("dd/MM/yyyy");
        entryDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(entryDateCreateInput);
        
        Message entryDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        entryDateCreateInputMessage.setId("entryDateCreateInputMessage");
        entryDateCreateInputMessage.setFor("entryDateCreateInput");
        entryDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(entryDateCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserAccountBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usernameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameEditOutput.setId("usernameEditOutput");
        usernameEditOutput.setValue("Username: * ");
        htmlPanelGrid.getChildren().add(usernameEditOutput);
        
        InputText usernameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameEditInput.setId("usernameEditInput");
        usernameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.username}", String.class));
        LengthValidator usernameEditInputValidator = new LengthValidator();
        usernameEditInputValidator.setMinimum(3);
        usernameEditInput.addValidator(usernameEditInputValidator);
        usernameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(usernameEditInput);
        
        Message usernameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameEditInputMessage.setId("usernameEditInputMessage");
        usernameEditInputMessage.setFor("usernameEditInput");
        usernameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameEditInputMessage);
        
        HtmlOutputText passwordEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password: * ");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputText passwordEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.password}", String.class));
        LengthValidator passwordEditInputValidator = new LengthValidator();
        passwordEditInputValidator.setMinimum(5);
        passwordEditInput.addValidator(passwordEditInputValidator);
        passwordEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        HtmlOutputText rolesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesEditOutput.setId("rolesEditOutput");
        rolesEditOutput.setValue("Roles: * ");
        htmlPanelGrid.getChildren().add(rolesEditOutput);
        
        AutoComplete rolesEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        rolesEditInput.setId("rolesEditInput");
        rolesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.roles}", RoleName.class));
        rolesEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userAccountBean.completeRoles}", List.class, new Class[] { String.class }));
        rolesEditInput.setDropdown(true);
        rolesEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(rolesEditInput);
        
        Message rolesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolesEditInputMessage.setId("rolesEditInputMessage");
        rolesEditInputMessage.setFor("rolesEditInput");
        rolesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolesEditInputMessage);
        
        HtmlOutputText firstNameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameEditOutput.setId("firstNameEditOutput");
        firstNameEditOutput.setValue("First Name:   ");
        htmlPanelGrid.getChildren().add(firstNameEditOutput);
        
        InputText firstNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        firstNameEditInput.setId("firstNameEditInput");
        firstNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.firstName}", String.class));
        htmlPanelGrid.getChildren().add(firstNameEditInput);
        
        Message firstNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameEditInputMessage.setId("firstNameEditInputMessage");
        firstNameEditInputMessage.setFor("firstNameEditInput");
        firstNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameEditInputMessage);
        
        HtmlOutputText lastNameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameEditOutput.setId("lastNameEditOutput");
        lastNameEditOutput.setValue("Last Name: * ");
        htmlPanelGrid.getChildren().add(lastNameEditOutput);
        
        InputText lastNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        lastNameEditInput.setId("lastNameEditInput");
        lastNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.lastName}", String.class));
        htmlPanelGrid.getChildren().add(lastNameEditInput);
        
        Message lastNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameEditInputMessage.setId("lastNameEditInputMessage");
        lastNameEditInputMessage.setFor("lastNameEditInput");
        lastNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameEditInputMessage);
        
        HtmlOutputText fullNameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fullNameEditOutput.setId("fullNameEditOutput");
        fullNameEditOutput.setValue("Full Name:   ");
        htmlPanelGrid.getChildren().add(fullNameEditOutput);
        
        InputText fullNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        fullNameEditInput.setId("fullNameEditInput");
        fullNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.fullName}", String.class));
        htmlPanelGrid.getChildren().add(fullNameEditInput);
        
        Message fullNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fullNameEditInputMessage.setId("fullNameEditInputMessage");
        fullNameEditInputMessage.setFor("fullNameEditInput");
        fullNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fullNameEditInputMessage);
        
        HtmlOutputText accountEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountEditOutput.setId("accountEditOutput");
        accountEditOutput.setValue("Account:   ");
        htmlPanelGrid.getChildren().add(accountEditOutput);
        
        InputText accountEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        accountEditInput.setId("accountEditInput");
        accountEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.account}", BigDecimal.class));
        accountEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(accountEditInput);
        
        Message accountEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        accountEditInputMessage.setId("accountEditInputMessage");
        accountEditInputMessage.setFor("accountEditInput");
        accountEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(accountEditInputMessage);
        
        HtmlOutputText genderEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderEditOutput.setId("genderEditOutput");
        genderEditOutput.setValue("Gender:   ");
        htmlPanelGrid.getChildren().add(genderEditOutput);
        
        AutoComplete genderEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        genderEditInput.setId("genderEditInput");
        genderEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.gender}", Gender.class));
        genderEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{userAccountBean.completeGender}", List.class, new Class[] { String.class }));
        genderEditInput.setDropdown(true);
        genderEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(genderEditInput);
        
        Message genderEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        genderEditInputMessage.setId("genderEditInputMessage");
        genderEditInputMessage.setFor("genderEditInput");
        genderEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(genderEditInputMessage);
        
        HtmlOutputText identityNumberEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identityNumberEditOutput.setId("identityNumberEditOutput");
        identityNumberEditOutput.setValue("Identity Number:   ");
        htmlPanelGrid.getChildren().add(identityNumberEditOutput);
        
        InputText identityNumberEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identityNumberEditInput.setId("identityNumberEditInput");
        identityNumberEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.identityNumber}", String.class));
        htmlPanelGrid.getChildren().add(identityNumberEditInput);
        
        Message identityNumberEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identityNumberEditInputMessage.setId("identityNumberEditInputMessage");
        identityNumberEditInputMessage.setFor("identityNumberEditInput");
        identityNumberEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identityNumberEditInputMessage);
        
        HtmlOutputText phoneNumberEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phoneNumberEditOutput.setId("phoneNumberEditOutput");
        phoneNumberEditOutput.setValue("Phone Number:   ");
        htmlPanelGrid.getChildren().add(phoneNumberEditOutput);
        
        InputText phoneNumberEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        phoneNumberEditInput.setId("phoneNumberEditInput");
        phoneNumberEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.phoneNumber}", String.class));
        htmlPanelGrid.getChildren().add(phoneNumberEditInput);
        
        Message phoneNumberEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        phoneNumberEditInputMessage.setId("phoneNumberEditInputMessage");
        phoneNumberEditInputMessage.setFor("phoneNumberEditInput");
        phoneNumberEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(phoneNumberEditInputMessage);
        
        HtmlOutputText emailEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.email}", String.class));
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        HtmlOutputText nationalityEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityEditOutput.setId("nationalityEditOutput");
        nationalityEditOutput.setValue("Nationality:   ");
        htmlPanelGrid.getChildren().add(nationalityEditOutput);
        
        InputText nationalityEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nationalityEditInput.setId("nationalityEditInput");
        nationalityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.nationality}", String.class));
        htmlPanelGrid.getChildren().add(nationalityEditInput);
        
        Message nationalityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityEditInputMessage.setId("nationalityEditInputMessage");
        nationalityEditInputMessage.setFor("nationalityEditInput");
        nationalityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityEditInputMessage);
        
        HtmlOutputText professionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        professionEditOutput.setId("professionEditOutput");
        professionEditOutput.setValue("Profession:   ");
        htmlPanelGrid.getChildren().add(professionEditOutput);
        
        InputText professionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        professionEditInput.setId("professionEditInput");
        professionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.profession}", String.class));
        htmlPanelGrid.getChildren().add(professionEditInput);
        
        Message professionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        professionEditInputMessage.setId("professionEditInputMessage");
        professionEditInputMessage.setFor("professionEditInput");
        professionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(professionEditInputMessage);
        
        HtmlOutputText imageEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imageEditOutput.setId("imageEditOutput");
        imageEditOutput.setValue("Image:   ");
        htmlPanelGrid.getChildren().add(imageEditOutput);
        
        FileUpload imageEditInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        imageEditInput.setId("imageEditInput");
        imageEditInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{userAccountBean.handleFileUploadForImage}", void.class, new Class[] { FileUploadEvent.class }));
        imageEditInput.setMode("advanced");
        imageEditInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        imageEditInput.setUpdate(":growlForm:growl");
        htmlPanelGrid.getChildren().add(imageEditInput);
        
        Message imageEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        imageEditInputMessage.setId("imageEditInputMessage");
        imageEditInputMessage.setFor("imageEditInput");
        imageEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(imageEditInputMessage);
        
        HtmlOutputText blackListEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        blackListEditOutput.setId("blackListEditOutput");
        blackListEditOutput.setValue("Black List:   ");
        htmlPanelGrid.getChildren().add(blackListEditOutput);
        
        SelectBooleanCheckbox blackListEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        blackListEditInput.setId("blackListEditInput");
        blackListEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.blackList}", Boolean.class));
        blackListEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(blackListEditInput);
        
        Message blackListEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        blackListEditInputMessage.setId("blackListEditInputMessage");
        blackListEditInputMessage.setFor("blackListEditInput");
        blackListEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(blackListEditInputMessage);
        
        HtmlOutputText entryDateEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        entryDateEditOutput.setId("entryDateEditOutput");
        entryDateEditOutput.setValue("Entry Date: * ");
        htmlPanelGrid.getChildren().add(entryDateEditOutput);
        
        Calendar entryDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        entryDateEditInput.setId("entryDateEditInput");
        entryDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.entryDate}", Date.class));
        entryDateEditInput.setNavigator(true);
        entryDateEditInput.setEffect("slideDown");
        entryDateEditInput.setPattern("dd/MM/yyyy");
        entryDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(entryDateEditInput);
        
        Message entryDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        entryDateEditInputMessage.setId("entryDateEditInputMessage");
        entryDateEditInputMessage.setFor("entryDateEditInput");
        entryDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(entryDateEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserAccountBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usernameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameLabel.setId("usernameLabel");
        usernameLabel.setValue("Username:   ");
        htmlPanelGrid.getChildren().add(usernameLabel);
        
        HtmlOutputText usernameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameValue.setId("usernameValue");
        usernameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.username}", String.class));
        htmlPanelGrid.getChildren().add(usernameValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:   ");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        HtmlOutputText passwordValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordValue);
        
        HtmlOutputText rolesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesLabel.setId("rolesLabel");
        rolesLabel.setValue("Roles:   ");
        htmlPanelGrid.getChildren().add(rolesLabel);
        
        HtmlOutputText rolesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.roles}", String.class));
        htmlPanelGrid.getChildren().add(rolesValue);
        
        HtmlOutputText firstNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameLabel.setId("firstNameLabel");
        firstNameLabel.setValue("First Name:   ");
        htmlPanelGrid.getChildren().add(firstNameLabel);
        
        HtmlOutputText firstNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameValue.setId("firstNameValue");
        firstNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.firstName}", String.class));
        htmlPanelGrid.getChildren().add(firstNameValue);
        
        HtmlOutputText lastNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameLabel.setId("lastNameLabel");
        lastNameLabel.setValue("Last Name:   ");
        htmlPanelGrid.getChildren().add(lastNameLabel);
        
        HtmlOutputText lastNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameValue.setId("lastNameValue");
        lastNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.lastName}", String.class));
        htmlPanelGrid.getChildren().add(lastNameValue);
        
        HtmlOutputText fullNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fullNameLabel.setId("fullNameLabel");
        fullNameLabel.setValue("Full Name:   ");
        htmlPanelGrid.getChildren().add(fullNameLabel);
        
        HtmlOutputText fullNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fullNameValue.setId("fullNameValue");
        fullNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.fullName}", String.class));
        htmlPanelGrid.getChildren().add(fullNameValue);
        
        HtmlOutputText accountLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountLabel.setId("accountLabel");
        accountLabel.setValue("Account:   ");
        htmlPanelGrid.getChildren().add(accountLabel);
        
        HtmlOutputText accountValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        accountValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.account}", String.class));
        htmlPanelGrid.getChildren().add(accountValue);
        
        HtmlOutputText genderLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderLabel.setId("genderLabel");
        genderLabel.setValue("Gender:   ");
        htmlPanelGrid.getChildren().add(genderLabel);
        
        HtmlOutputText genderValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        genderValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.gender}", String.class));
        htmlPanelGrid.getChildren().add(genderValue);
        
        HtmlOutputText identityNumberLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identityNumberLabel.setId("identityNumberLabel");
        identityNumberLabel.setValue("Identity Number:   ");
        htmlPanelGrid.getChildren().add(identityNumberLabel);
        
        HtmlOutputText identityNumberValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identityNumberValue.setId("identityNumberValue");
        identityNumberValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.identityNumber}", String.class));
        htmlPanelGrid.getChildren().add(identityNumberValue);
        
        HtmlOutputText phoneNumberLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phoneNumberLabel.setId("phoneNumberLabel");
        phoneNumberLabel.setValue("Phone Number:   ");
        htmlPanelGrid.getChildren().add(phoneNumberLabel);
        
        HtmlOutputText phoneNumberValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phoneNumberValue.setId("phoneNumberValue");
        phoneNumberValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.phoneNumber}", String.class));
        htmlPanelGrid.getChildren().add(phoneNumberValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText nationalityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityLabel.setId("nationalityLabel");
        nationalityLabel.setValue("Nationality:   ");
        htmlPanelGrid.getChildren().add(nationalityLabel);
        
        HtmlOutputText nationalityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityValue.setId("nationalityValue");
        nationalityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.nationality}", String.class));
        htmlPanelGrid.getChildren().add(nationalityValue);
        
        HtmlOutputText professionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        professionLabel.setId("professionLabel");
        professionLabel.setValue("Profession:   ");
        htmlPanelGrid.getChildren().add(professionLabel);
        
        HtmlOutputText professionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        professionValue.setId("professionValue");
        professionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.profession}", String.class));
        htmlPanelGrid.getChildren().add(professionValue);
        
        HtmlOutputText imageLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        imageLabel.setId("imageLabel");
        imageLabel.setValue("Image:   ");
        htmlPanelGrid.getChildren().add(imageLabel);
        
        UIComponent imageValue;
        if (userAccount != null && userAccount.getImage() != null && userAccount.getImage().length > 0) {
            imageValue = (CommandButton) application.createComponent(CommandButton.COMPONENT_TYPE);
            ((CommandButton) imageValue).addActionListener(new FileDownloadActionListener(expressionFactory.createValueExpression(elContext, "#{userAccountBean.imageStreamedContent}", StreamedContent.class), null));
            ((CommandButton) imageValue).setValue("Download");
            ((CommandButton) imageValue).setAjax(false);
        } else {
            imageValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
            ((HtmlOutputText) imageValue).setValue("");
        }
        htmlPanelGrid.getChildren().add(imageValue);
        
        HtmlOutputText blackListLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        blackListLabel.setId("blackListLabel");
        blackListLabel.setValue("Black List:   ");
        htmlPanelGrid.getChildren().add(blackListLabel);
        
        HtmlOutputText blackListValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        blackListValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.blackList}", String.class));
        htmlPanelGrid.getChildren().add(blackListValue);
        
        HtmlOutputText entryDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        entryDateLabel.setId("entryDateLabel");
        entryDateLabel.setValue("Entry Date:   ");
        htmlPanelGrid.getChildren().add(entryDateLabel);
        
        HtmlOutputText entryDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        entryDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userAccountBean.userAccount.entryDate}", Date.class));
        DateTimeConverter entryDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        entryDateValueConverter.setPattern("dd/MM/yyyy");
        entryDateValue.setConverter(entryDateValueConverter);
        htmlPanelGrid.getChildren().add(entryDateValue);
        
        return htmlPanelGrid;
    }
    
    public UserAccount UserAccountBean.getUserAccount() {
        if (userAccount == null) {
            userAccount = new UserAccount();
        }
        return userAccount;
    }
    
    public void UserAccountBean.setUserAccount(UserAccount userAccount) {
        this.userAccount = userAccount;
    }
    
    public List<RoleName> UserAccountBean.completeRoles(String query) {
        List<RoleName> suggestions = new ArrayList<RoleName>();
        for (RoleName roleName : RoleName.values()) {
            if (roleName.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(roleName);
            }
        }
        return suggestions;
    }
    
    public List<Gender> UserAccountBean.completeGender(String query) {
        List<Gender> suggestions = new ArrayList<Gender>();
        for (Gender gender : Gender.values()) {
            if (gender.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(gender);
            }
        }
        return suggestions;
    }
    
    public void UserAccountBean.handleFileUploadForImage(FileUploadEvent event) {
        userAccount.setImage(event.getFile().getContents());
        FacesMessage facesMessage = new FacesMessage("Successful", event.getFile().getFileName() + " is uploaded.");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
    }
    
    public StreamedContent UserAccountBean.getImageStreamedContent() {
        if (userAccount != null && userAccount.getImage() != null) {
            return new DefaultStreamedContent(new ByteArrayInputStream(userAccount.getImage()), "image/jpeg", "image.jpg");
        }
        return new DefaultStreamedContent(new ByteArrayInputStream("".getBytes()));
    }
    
    public String UserAccountBean.onEdit() {
        return null;
    }
    
    public boolean UserAccountBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void UserAccountBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String UserAccountBean.displayList() {
        createDialogVisible = false;
        findAllUserAccounts();
        return "userAccount";
    }
    
    public String UserAccountBean.displayCreateDialog() {
        userAccount = new UserAccount();
        createDialogVisible = true;
        return "userAccount";
    }
    
    public String UserAccountBean.persist() {
        String message = "";
        if (userAccount.getId() != null) {
            userAccountService.updateUserAccount(userAccount);
            message = "Successfully updated";
        } else {
            userAccountService.saveUserAccount(userAccount);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUserAccounts();
    }
    
    public String UserAccountBean.delete() {
        userAccountService.deleteUserAccount(userAccount);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUserAccounts();
    }
    
    public void UserAccountBean.reset() {
        userAccount = null;
        createDialogVisible = false;
    }
    
    public void UserAccountBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
