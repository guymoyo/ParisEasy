// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.web;

import com.guymoyo.domain.CategoryParis;
import com.guymoyo.domain.Etat;
import com.guymoyo.domain.Event;
import com.guymoyo.domain.Paris;
import com.guymoyo.domain.Rencontre;
import com.guymoyo.domain.UserAccount;
import com.guymoyo.service.CategoryParisService;
import com.guymoyo.service.EventService;
import com.guymoyo.service.PariseService;
import com.guymoyo.service.RencontreService;
import com.guymoyo.service.UserAccountService;
import com.guymoyo.web.ParisBean;
import com.guymoyo.web.converter.CategoryParisConverter;
import com.guymoyo.web.converter.EventConverter;
import com.guymoyo.web.converter.RencontreConverter;
import com.guymoyo.web.converter.UserAccountConverter;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect ParisBean_Roo_ManagedBean {
    
    declare @type: ParisBean: @ManagedBean(name = "parisBean");
    
    declare @type: ParisBean: @SessionScoped;
    
    @Autowired
    PariseService ParisBean.pariseService;
    
    @Autowired
    RencontreService ParisBean.rencontreService;
    
    @Autowired
    CategoryParisService ParisBean.categoryParisService;
    
    @Autowired
    EventService ParisBean.eventService;
    
    @Autowired
    UserAccountService ParisBean.userAccountService;
    
    private String ParisBean.name = "Parises";
    
    private Paris ParisBean.paris;
    
    private List<Paris> ParisBean.allParises;
    
    private boolean ParisBean.dataVisible = false;
    
    private List<String> ParisBean.columns;
    
    private HtmlPanelGrid ParisBean.createPanelGrid;
    
    private HtmlPanelGrid ParisBean.editPanelGrid;
    
    private HtmlPanelGrid ParisBean.viewPanelGrid;
    
    private boolean ParisBean.createDialogVisible = false;
    
    @PostConstruct
    public void ParisBean.init() {
        columns = new ArrayList<String>();
        columns.add("dateOfCreation");
        columns.add("dateOfClose");
        columns.add("cote");
    }
    
    public String ParisBean.getName() {
        return name;
    }
    
    public List<String> ParisBean.getColumns() {
        return columns;
    }
    
    public List<Paris> ParisBean.getAllParises() {
        return allParises;
    }
    
    public void ParisBean.setAllParises(List<Paris> allParises) {
        this.allParises = allParises;
    }
    
    public String ParisBean.findAllParises() {
        allParises = pariseService.findAllParises();
        dataVisible = !allParises.isEmpty();
        return null;
    }
    
    public boolean ParisBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ParisBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ParisBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ParisBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ParisBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ParisBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ParisBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ParisBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ParisBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText rencontreCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rencontreCreateOutput.setId("rencontreCreateOutput");
        rencontreCreateOutput.setValue("Rencontre:   ");
        htmlPanelGrid.getChildren().add(rencontreCreateOutput);
        
        AutoComplete rencontreCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        rencontreCreateInput.setId("rencontreCreateInput");
        rencontreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.rencontre}", Rencontre.class));
        rencontreCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeRencontre}", List.class, new Class[] { String.class }));
        rencontreCreateInput.setDropdown(true);
        rencontreCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "rencontre", String.class));
        rencontreCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{rencontre.creationDate} #{rencontre.lieu} #{rencontre.rencontreDate}", String.class));
        rencontreCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{rencontre}", Rencontre.class));
        rencontreCreateInput.setConverter(new RencontreConverter());
        rencontreCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rencontreCreateInput);
        
        Message rencontreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rencontreCreateInputMessage.setId("rencontreCreateInputMessage");
        rencontreCreateInputMessage.setFor("rencontreCreateInput");
        rencontreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rencontreCreateInputMessage);
        
        HtmlOutputText categoryParisCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryParisCreateOutput.setId("categoryParisCreateOutput");
        categoryParisCreateOutput.setValue("Category Paris:   ");
        htmlPanelGrid.getChildren().add(categoryParisCreateOutput);
        
        AutoComplete categoryParisCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryParisCreateInput.setId("categoryParisCreateInput");
        categoryParisCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.categoryParis}", CategoryParis.class));
        categoryParisCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeCategoryParis}", List.class, new Class[] { String.class }));
        categoryParisCreateInput.setDropdown(true);
        categoryParisCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoryParis", String.class));
        categoryParisCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoryParis.name} #{categoryParis.description}", String.class));
        categoryParisCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoryParis}", CategoryParis.class));
        categoryParisCreateInput.setConverter(new CategoryParisConverter());
        categoryParisCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryParisCreateInput);
        
        Message categoryParisCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryParisCreateInputMessage.setId("categoryParisCreateInputMessage");
        categoryParisCreateInputMessage.setFor("categoryParisCreateInput");
        categoryParisCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryParisCreateInputMessage);
        
        HtmlOutputText eventCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eventCreateOutput.setId("eventCreateOutput");
        eventCreateOutput.setValue("Event:   ");
        htmlPanelGrid.getChildren().add(eventCreateOutput);
        
        AutoComplete eventCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        eventCreateInput.setId("eventCreateInput");
        eventCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.event}", Event.class));
        eventCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeEvent}", List.class, new Class[] { String.class }));
        eventCreateInput.setDropdown(true);
        eventCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "event", String.class));
        eventCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{event.name} #{event.description}", String.class));
        eventCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{event}", Event.class));
        eventCreateInput.setConverter(new EventConverter());
        eventCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(eventCreateInput);
        
        Message eventCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eventCreateInputMessage.setId("eventCreateInputMessage");
        eventCreateInputMessage.setFor("eventCreateInput");
        eventCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eventCreateInputMessage);
        
        HtmlOutputText dateOfCreationCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCreationCreateOutput.setId("dateOfCreationCreateOutput");
        dateOfCreationCreateOutput.setValue("Date Of Creation:   ");
        htmlPanelGrid.getChildren().add(dateOfCreationCreateOutput);
        
        Calendar dateOfCreationCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateOfCreationCreateInput.setId("dateOfCreationCreateInput");
        dateOfCreationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.dateOfCreation}", Date.class));
        dateOfCreationCreateInput.setNavigator(true);
        dateOfCreationCreateInput.setEffect("slideDown");
        dateOfCreationCreateInput.setPattern("dd/MM/yyyy");
        dateOfCreationCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateOfCreationCreateInput);
        
        Message dateOfCreationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateOfCreationCreateInputMessage.setId("dateOfCreationCreateInputMessage");
        dateOfCreationCreateInputMessage.setFor("dateOfCreationCreateInput");
        dateOfCreationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateOfCreationCreateInputMessage);
        
        HtmlOutputText dateOfCloseCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCloseCreateOutput.setId("dateOfCloseCreateOutput");
        dateOfCloseCreateOutput.setValue("Date Of Close:   ");
        htmlPanelGrid.getChildren().add(dateOfCloseCreateOutput);
        
        Calendar dateOfCloseCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateOfCloseCreateInput.setId("dateOfCloseCreateInput");
        dateOfCloseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.dateOfClose}", Date.class));
        dateOfCloseCreateInput.setNavigator(true);
        dateOfCloseCreateInput.setEffect("slideDown");
        dateOfCloseCreateInput.setPattern("dd/MM/yyyy");
        dateOfCloseCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateOfCloseCreateInput);
        
        Message dateOfCloseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateOfCloseCreateInputMessage.setId("dateOfCloseCreateInputMessage");
        dateOfCloseCreateInputMessage.setFor("dateOfCloseCreateInput");
        dateOfCloseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateOfCloseCreateInputMessage);
        
        HtmlOutputText coteCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        coteCreateOutput.setId("coteCreateOutput");
        coteCreateOutput.setValue("Cote:   ");
        htmlPanelGrid.getChildren().add(coteCreateOutput);
        
        InputText coteCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        coteCreateInput.setId("coteCreateInput");
        coteCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.cote}", BigDecimal.class));
        coteCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(coteCreateInput);
        
        Message coteCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        coteCreateInputMessage.setId("coteCreateInputMessage");
        coteCreateInputMessage.setFor("coteCreateInput");
        coteCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(coteCreateInputMessage);
        
        HtmlOutputText etatCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etatCreateOutput.setId("etatCreateOutput");
        etatCreateOutput.setValue("Etat:   ");
        htmlPanelGrid.getChildren().add(etatCreateOutput);
        
        AutoComplete etatCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        etatCreateInput.setId("etatCreateInput");
        etatCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.etat}", Etat.class));
        etatCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeEtat}", List.class, new Class[] { String.class }));
        etatCreateInput.setDropdown(true);
        etatCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(etatCreateInput);
        
        Message etatCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        etatCreateInputMessage.setId("etatCreateInputMessage");
        etatCreateInputMessage.setFor("etatCreateInput");
        etatCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(etatCreateInputMessage);
        
        HtmlOutputText createdByCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByCreateOutput.setId("createdByCreateOutput");
        createdByCreateOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByCreateOutput);
        
        AutoComplete createdByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByCreateInput.setId("createdByCreateInput");
        createdByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.createdBy}", UserAccount.class));
        createdByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByCreateInput.setDropdown(true);
        createdByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.username} #{createdBy.password} #{createdBy.firstName} #{createdBy.lastName}", String.class));
        createdByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", UserAccount.class));
        createdByCreateInput.setConverter(new UserAccountConverter());
        createdByCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByCreateInput);
        
        Message createdByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByCreateInputMessage.setId("createdByCreateInputMessage");
        createdByCreateInputMessage.setFor("createdByCreateInput");
        createdByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ParisBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText rencontreEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rencontreEditOutput.setId("rencontreEditOutput");
        rencontreEditOutput.setValue("Rencontre:   ");
        htmlPanelGrid.getChildren().add(rencontreEditOutput);
        
        AutoComplete rencontreEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        rencontreEditInput.setId("rencontreEditInput");
        rencontreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.rencontre}", Rencontre.class));
        rencontreEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeRencontre}", List.class, new Class[] { String.class }));
        rencontreEditInput.setDropdown(true);
        rencontreEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "rencontre", String.class));
        rencontreEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{rencontre.creationDate} #{rencontre.lieu} #{rencontre.rencontreDate}", String.class));
        rencontreEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{rencontre}", Rencontre.class));
        rencontreEditInput.setConverter(new RencontreConverter());
        rencontreEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rencontreEditInput);
        
        Message rencontreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rencontreEditInputMessage.setId("rencontreEditInputMessage");
        rencontreEditInputMessage.setFor("rencontreEditInput");
        rencontreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rencontreEditInputMessage);
        
        HtmlOutputText categoryParisEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryParisEditOutput.setId("categoryParisEditOutput");
        categoryParisEditOutput.setValue("Category Paris:   ");
        htmlPanelGrid.getChildren().add(categoryParisEditOutput);
        
        AutoComplete categoryParisEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoryParisEditInput.setId("categoryParisEditInput");
        categoryParisEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.categoryParis}", CategoryParis.class));
        categoryParisEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeCategoryParis}", List.class, new Class[] { String.class }));
        categoryParisEditInput.setDropdown(true);
        categoryParisEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoryParis", String.class));
        categoryParisEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoryParis.name} #{categoryParis.description}", String.class));
        categoryParisEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoryParis}", CategoryParis.class));
        categoryParisEditInput.setConverter(new CategoryParisConverter());
        categoryParisEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoryParisEditInput);
        
        Message categoryParisEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoryParisEditInputMessage.setId("categoryParisEditInputMessage");
        categoryParisEditInputMessage.setFor("categoryParisEditInput");
        categoryParisEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoryParisEditInputMessage);
        
        HtmlOutputText eventEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eventEditOutput.setId("eventEditOutput");
        eventEditOutput.setValue("Event:   ");
        htmlPanelGrid.getChildren().add(eventEditOutput);
        
        AutoComplete eventEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        eventEditInput.setId("eventEditInput");
        eventEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.event}", Event.class));
        eventEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeEvent}", List.class, new Class[] { String.class }));
        eventEditInput.setDropdown(true);
        eventEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "event", String.class));
        eventEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{event.name} #{event.description}", String.class));
        eventEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{event}", Event.class));
        eventEditInput.setConverter(new EventConverter());
        eventEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(eventEditInput);
        
        Message eventEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        eventEditInputMessage.setId("eventEditInputMessage");
        eventEditInputMessage.setFor("eventEditInput");
        eventEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(eventEditInputMessage);
        
        HtmlOutputText dateOfCreationEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCreationEditOutput.setId("dateOfCreationEditOutput");
        dateOfCreationEditOutput.setValue("Date Of Creation:   ");
        htmlPanelGrid.getChildren().add(dateOfCreationEditOutput);
        
        Calendar dateOfCreationEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateOfCreationEditInput.setId("dateOfCreationEditInput");
        dateOfCreationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.dateOfCreation}", Date.class));
        dateOfCreationEditInput.setNavigator(true);
        dateOfCreationEditInput.setEffect("slideDown");
        dateOfCreationEditInput.setPattern("dd/MM/yyyy");
        dateOfCreationEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateOfCreationEditInput);
        
        Message dateOfCreationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateOfCreationEditInputMessage.setId("dateOfCreationEditInputMessage");
        dateOfCreationEditInputMessage.setFor("dateOfCreationEditInput");
        dateOfCreationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateOfCreationEditInputMessage);
        
        HtmlOutputText dateOfCloseEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCloseEditOutput.setId("dateOfCloseEditOutput");
        dateOfCloseEditOutput.setValue("Date Of Close:   ");
        htmlPanelGrid.getChildren().add(dateOfCloseEditOutput);
        
        Calendar dateOfCloseEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dateOfCloseEditInput.setId("dateOfCloseEditInput");
        dateOfCloseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.dateOfClose}", Date.class));
        dateOfCloseEditInput.setNavigator(true);
        dateOfCloseEditInput.setEffect("slideDown");
        dateOfCloseEditInput.setPattern("dd/MM/yyyy");
        dateOfCloseEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dateOfCloseEditInput);
        
        Message dateOfCloseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dateOfCloseEditInputMessage.setId("dateOfCloseEditInputMessage");
        dateOfCloseEditInputMessage.setFor("dateOfCloseEditInput");
        dateOfCloseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dateOfCloseEditInputMessage);
        
        HtmlOutputText coteEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        coteEditOutput.setId("coteEditOutput");
        coteEditOutput.setValue("Cote:   ");
        htmlPanelGrid.getChildren().add(coteEditOutput);
        
        InputText coteEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        coteEditInput.setId("coteEditInput");
        coteEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.cote}", BigDecimal.class));
        coteEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(coteEditInput);
        
        Message coteEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        coteEditInputMessage.setId("coteEditInputMessage");
        coteEditInputMessage.setFor("coteEditInput");
        coteEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(coteEditInputMessage);
        
        HtmlOutputText etatEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etatEditOutput.setId("etatEditOutput");
        etatEditOutput.setValue("Etat:   ");
        htmlPanelGrid.getChildren().add(etatEditOutput);
        
        AutoComplete etatEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        etatEditInput.setId("etatEditInput");
        etatEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.etat}", Etat.class));
        etatEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeEtat}", List.class, new Class[] { String.class }));
        etatEditInput.setDropdown(true);
        etatEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(etatEditInput);
        
        Message etatEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        etatEditInputMessage.setId("etatEditInputMessage");
        etatEditInputMessage.setFor("etatEditInput");
        etatEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(etatEditInputMessage);
        
        HtmlOutputText createdByEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByEditOutput.setId("createdByEditOutput");
        createdByEditOutput.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByEditOutput);
        
        AutoComplete createdByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        createdByEditInput.setId("createdByEditInput");
        createdByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.createdBy}", UserAccount.class));
        createdByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{parisBean.completeCreatedBy}", List.class, new Class[] { String.class }));
        createdByEditInput.setDropdown(true);
        createdByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "createdBy", String.class));
        createdByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{createdBy.username} #{createdBy.password} #{createdBy.firstName} #{createdBy.lastName}", String.class));
        createdByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{createdBy}", UserAccount.class));
        createdByEditInput.setConverter(new UserAccountConverter());
        createdByEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdByEditInput);
        
        Message createdByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdByEditInputMessage.setId("createdByEditInputMessage");
        createdByEditInputMessage.setFor("createdByEditInput");
        createdByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdByEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ParisBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText rencontreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rencontreLabel.setId("rencontreLabel");
        rencontreLabel.setValue("Rencontre:   ");
        htmlPanelGrid.getChildren().add(rencontreLabel);
        
        HtmlOutputText rencontreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rencontreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.rencontre}", Rencontre.class));
        rencontreValue.setConverter(new RencontreConverter());
        htmlPanelGrid.getChildren().add(rencontreValue);
        
        HtmlOutputText categoryParisLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryParisLabel.setId("categoryParisLabel");
        categoryParisLabel.setValue("Category Paris:   ");
        htmlPanelGrid.getChildren().add(categoryParisLabel);
        
        HtmlOutputText categoryParisValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoryParisValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.categoryParis}", CategoryParis.class));
        categoryParisValue.setConverter(new CategoryParisConverter());
        htmlPanelGrid.getChildren().add(categoryParisValue);
        
        HtmlOutputText eventLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eventLabel.setId("eventLabel");
        eventLabel.setValue("Event:   ");
        htmlPanelGrid.getChildren().add(eventLabel);
        
        HtmlOutputText eventValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        eventValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.event}", Event.class));
        eventValue.setConverter(new EventConverter());
        htmlPanelGrid.getChildren().add(eventValue);
        
        HtmlOutputText dateOfCreationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCreationLabel.setId("dateOfCreationLabel");
        dateOfCreationLabel.setValue("Date Of Creation:   ");
        htmlPanelGrid.getChildren().add(dateOfCreationLabel);
        
        HtmlOutputText dateOfCreationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCreationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.dateOfCreation}", Date.class));
        DateTimeConverter dateOfCreationValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dateOfCreationValueConverter.setPattern("dd/MM/yyyy");
        dateOfCreationValue.setConverter(dateOfCreationValueConverter);
        htmlPanelGrid.getChildren().add(dateOfCreationValue);
        
        HtmlOutputText dateOfCloseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCloseLabel.setId("dateOfCloseLabel");
        dateOfCloseLabel.setValue("Date Of Close:   ");
        htmlPanelGrid.getChildren().add(dateOfCloseLabel);
        
        HtmlOutputText dateOfCloseValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dateOfCloseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.dateOfClose}", Date.class));
        DateTimeConverter dateOfCloseValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dateOfCloseValueConverter.setPattern("dd/MM/yyyy");
        dateOfCloseValue.setConverter(dateOfCloseValueConverter);
        htmlPanelGrid.getChildren().add(dateOfCloseValue);
        
        HtmlOutputText coteLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        coteLabel.setId("coteLabel");
        coteLabel.setValue("Cote:   ");
        htmlPanelGrid.getChildren().add(coteLabel);
        
        HtmlOutputText coteValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        coteValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.cote}", String.class));
        htmlPanelGrid.getChildren().add(coteValue);
        
        HtmlOutputText etatLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etatLabel.setId("etatLabel");
        etatLabel.setValue("Etat:   ");
        htmlPanelGrid.getChildren().add(etatLabel);
        
        HtmlOutputText etatValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etatValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.etat}", String.class));
        htmlPanelGrid.getChildren().add(etatValue);
        
        HtmlOutputText createdByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByLabel.setId("createdByLabel");
        createdByLabel.setValue("Created By:   ");
        htmlPanelGrid.getChildren().add(createdByLabel);
        
        HtmlOutputText createdByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{parisBean.paris.createdBy}", UserAccount.class));
        createdByValue.setConverter(new UserAccountConverter());
        htmlPanelGrid.getChildren().add(createdByValue);
        
        return htmlPanelGrid;
    }
    
    public Paris ParisBean.getParis() {
        if (paris == null) {
            paris = new Paris();
        }
        return paris;
    }
    
    public void ParisBean.setParis(Paris paris) {
        this.paris = paris;
    }
    
    public List<Rencontre> ParisBean.completeRencontre(String query) {
        List<Rencontre> suggestions = new ArrayList<Rencontre>();
        for (Rencontre rencontre : rencontreService.findAllRencontres()) {
            String rencontreStr = String.valueOf(rencontre.getCreationDate() +  " "  + rencontre.getLieu() +  " "  + rencontre.getRencontreDate());
            if (rencontreStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(rencontre);
            }
        }
        return suggestions;
    }
    
    public List<CategoryParis> ParisBean.completeCategoryParis(String query) {
        List<CategoryParis> suggestions = new ArrayList<CategoryParis>();
        for (CategoryParis categoryParis : categoryParisService.findAllCategoryParises()) {
            String categoryParisStr = String.valueOf(categoryParis.getName() +  " "  + categoryParis.getDescription());
            if (categoryParisStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(categoryParis);
            }
        }
        return suggestions;
    }
    
    public List<Event> ParisBean.completeEvent(String query) {
        List<Event> suggestions = new ArrayList<Event>();
        for (Event event : eventService.findAllEvents()) {
            String eventStr = String.valueOf(event.getName() +  " "  + event.getDescription());
            if (eventStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(event);
            }
        }
        return suggestions;
    }
    
    public List<Etat> ParisBean.completeEtat(String query) {
        List<Etat> suggestions = new ArrayList<Etat>();
        for (Etat etat : Etat.values()) {
            if (etat.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(etat);
            }
        }
        return suggestions;
    }
    
    public List<UserAccount> ParisBean.completeCreatedBy(String query) {
        List<UserAccount> suggestions = new ArrayList<UserAccount>();
        for (UserAccount userAccount : userAccountService.findAllUserAccounts()) {
            String userAccountStr = String.valueOf(userAccount.getUsername() +  " "  + userAccount.getPassword() +  " "  + userAccount.getFirstName() +  " "  + userAccount.getLastName());
            if (userAccountStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(userAccount);
            }
        }
        return suggestions;
    }
    
    public String ParisBean.onEdit() {
        return null;
    }
    
    public boolean ParisBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ParisBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ParisBean.displayList() {
        createDialogVisible = false;
        findAllParises();
        return "paris";
    }
    
    public String ParisBean.displayCreateDialog() {
        paris = new Paris();
        createDialogVisible = true;
        return "paris";
    }
    
    public String ParisBean.persist() {
        String message = "";
        if (paris.getId() != null) {
            pariseService.updateParis(paris);
            message = "Successfully updated";
        } else {
            pariseService.saveParis(paris);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllParises();
    }
    
    public String ParisBean.delete() {
        pariseService.deleteParis(paris);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllParises();
    }
    
    public void ParisBean.reset() {
        paris = null;
        createDialogVisible = false;
    }
    
    public void ParisBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
