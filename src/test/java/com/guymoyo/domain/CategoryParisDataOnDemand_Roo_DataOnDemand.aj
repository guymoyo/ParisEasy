// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.domain;

import com.guymoyo.domain.CategoryParis;
import com.guymoyo.domain.CategoryParisDataOnDemand;
import com.guymoyo.domain.UserAccountDataOnDemand;
import com.guymoyo.service.CategoryParisService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CategoryParisDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CategoryParisDataOnDemand: @Component;
    
    private Random CategoryParisDataOnDemand.rnd = new SecureRandom();
    
    private List<CategoryParis> CategoryParisDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand CategoryParisDataOnDemand.userAccountDataOnDemand;
    
    @Autowired
    CategoryParisService CategoryParisDataOnDemand.categoryParisService;
    
    public CategoryParis CategoryParisDataOnDemand.getNewTransientCategoryParis(int index) {
        CategoryParis obj = new CategoryParis();
        setDescription(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void CategoryParisDataOnDemand.setDescription(CategoryParis obj, int index) {
        String description = "description_" + index;
        if (description.length() > 255) {
            description = description.substring(0, 255);
        }
        obj.setDescription(description);
    }
    
    public void CategoryParisDataOnDemand.setName(CategoryParis obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public CategoryParis CategoryParisDataOnDemand.getSpecificCategoryParis(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CategoryParis obj = data.get(index);
        Long id = obj.getId();
        return categoryParisService.findCategoryParis(id);
    }
    
    public CategoryParis CategoryParisDataOnDemand.getRandomCategoryParis() {
        init();
        CategoryParis obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return categoryParisService.findCategoryParis(id);
    }
    
    public boolean CategoryParisDataOnDemand.modifyCategoryParis(CategoryParis obj) {
        return false;
    }
    
    public void CategoryParisDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = categoryParisService.findCategoryParisEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CategoryParis' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CategoryParis>();
        for (int i = 0; i < 10; i++) {
            CategoryParis obj = getNewTransientCategoryParis(i);
            try {
                categoryParisService.saveCategoryParis(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
