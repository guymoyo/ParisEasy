// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.domain;

import com.guymoyo.domain.Gender;
import com.guymoyo.domain.RoleName;
import com.guymoyo.domain.UserAccount;
import com.guymoyo.domain.UserAccountDataOnDemand;
import com.guymoyo.service.UserAccountService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserAccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAccountDataOnDemand: @Component;
    
    private Random UserAccountDataOnDemand.rnd = new SecureRandom();
    
    private List<UserAccount> UserAccountDataOnDemand.data;
    
    @Autowired
    UserAccountService UserAccountDataOnDemand.userAccountService;
    
    public UserAccount UserAccountDataOnDemand.getNewTransientUserAccount(int index) {
        UserAccount obj = new UserAccount();
        setAccount(obj, index);
        setBlackList(obj, index);
        setEmail(obj, index);
        setEntryDate(obj, index);
        setFirstName(obj, index);
        setFullName(obj, index);
        setGender(obj, index);
        setIdentityNumber(obj, index);
        setImage(obj, index);
        setLastName(obj, index);
        setNationality(obj, index);
        setPassword(obj, index);
        setPhoneNumber(obj, index);
        setProfession(obj, index);
        setRoles(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UserAccountDataOnDemand.setAccount(UserAccount obj, int index) {
        BigDecimal account = BigDecimal.valueOf(index);
        obj.setAccount(account);
    }
    
    public void UserAccountDataOnDemand.setBlackList(UserAccount obj, int index) {
        Boolean blackList = Boolean.TRUE;
        obj.setBlackList(blackList);
    }
    
    public void UserAccountDataOnDemand.setEmail(UserAccount obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void UserAccountDataOnDemand.setEntryDate(UserAccount obj, int index) {
        Date entryDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEntryDate(entryDate);
    }
    
    public void UserAccountDataOnDemand.setFirstName(UserAccount obj, int index) {
        String firstName = "firstName_" + index;
        obj.setFirstName(firstName);
    }
    
    public void UserAccountDataOnDemand.setFullName(UserAccount obj, int index) {
        String fullName = "fullName_" + index;
        obj.setFullName(fullName);
    }
    
    public void UserAccountDataOnDemand.setGender(UserAccount obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void UserAccountDataOnDemand.setIdentityNumber(UserAccount obj, int index) {
        String identityNumber = "identityNumber_" + index;
        obj.setIdentityNumber(identityNumber);
    }
    
    public void UserAccountDataOnDemand.setImage(UserAccount obj, int index) {
        byte[] image = String.valueOf(index).getBytes();
        obj.setImage(image);
    }
    
    public void UserAccountDataOnDemand.setLastName(UserAccount obj, int index) {
        String lastName = "lastName_" + index;
        obj.setLastName(lastName);
    }
    
    public void UserAccountDataOnDemand.setNationality(UserAccount obj, int index) {
        String nationality = "nationality_" + index;
        obj.setNationality(nationality);
    }
    
    public void UserAccountDataOnDemand.setPassword(UserAccount obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void UserAccountDataOnDemand.setPhoneNumber(UserAccount obj, int index) {
        String phoneNumber = "phoneNumber_" + index;
        obj.setPhoneNumber(phoneNumber);
    }
    
    public void UserAccountDataOnDemand.setProfession(UserAccount obj, int index) {
        String profession = "profession_" + index;
        obj.setProfession(profession);
    }
    
    public void UserAccountDataOnDemand.setRoles(UserAccount obj, int index) {
        RoleName roles = RoleName.class.getEnumConstants()[0];
        obj.setRoles(roles);
    }
    
    public void UserAccountDataOnDemand.setUsername(UserAccount obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public UserAccount UserAccountDataOnDemand.getSpecificUserAccount(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserAccount obj = data.get(index);
        Long id = obj.getId();
        return userAccountService.findUserAccount(id);
    }
    
    public UserAccount UserAccountDataOnDemand.getRandomUserAccount() {
        init();
        UserAccount obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return userAccountService.findUserAccount(id);
    }
    
    public boolean UserAccountDataOnDemand.modifyUserAccount(UserAccount obj) {
        return false;
    }
    
    public void UserAccountDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userAccountService.findUserAccountEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserAccount' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserAccount>();
        for (int i = 0; i < 10; i++) {
            UserAccount obj = getNewTransientUserAccount(i);
            try {
                userAccountService.saveUserAccount(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
