// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.domain;

import com.guymoyo.domain.CategoryParisDataOnDemand;
import com.guymoyo.domain.Etat;
import com.guymoyo.domain.EventDataOnDemand;
import com.guymoyo.domain.Paris;
import com.guymoyo.domain.ParisDataOnDemand;
import com.guymoyo.domain.RencontreDataOnDemand;
import com.guymoyo.domain.UserAccountDataOnDemand;
import com.guymoyo.service.PariseService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParisDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParisDataOnDemand: @Component;
    
    private Random ParisDataOnDemand.rnd = new SecureRandom();
    
    private List<Paris> ParisDataOnDemand.data;
    
    @Autowired
    private CategoryParisDataOnDemand ParisDataOnDemand.categoryParisDataOnDemand;
    
    @Autowired
    private UserAccountDataOnDemand ParisDataOnDemand.userAccountDataOnDemand;
    
    @Autowired
    private EventDataOnDemand ParisDataOnDemand.eventDataOnDemand;
    
    @Autowired
    private RencontreDataOnDemand ParisDataOnDemand.rencontreDataOnDemand;
    
    @Autowired
    PariseService ParisDataOnDemand.pariseService;
    
    public Paris ParisDataOnDemand.getNewTransientParis(int index) {
        Paris obj = new Paris();
        setCote(obj, index);
        setDateOfClose(obj, index);
        setDateOfCreation(obj, index);
        setEtat(obj, index);
        return obj;
    }
    
    public void ParisDataOnDemand.setCote(Paris obj, int index) {
        BigDecimal cote = BigDecimal.valueOf(index);
        obj.setCote(cote);
    }
    
    public void ParisDataOnDemand.setDateOfClose(Paris obj, int index) {
        Date dateOfClose = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfClose(dateOfClose);
    }
    
    public void ParisDataOnDemand.setDateOfCreation(Paris obj, int index) {
        Date dateOfCreation = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfCreation(dateOfCreation);
    }
    
    public void ParisDataOnDemand.setEtat(Paris obj, int index) {
        Etat etat = Etat.class.getEnumConstants()[0];
        obj.setEtat(etat);
    }
    
    public Paris ParisDataOnDemand.getSpecificParis(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Paris obj = data.get(index);
        Long id = obj.getId();
        return pariseService.findParis(id);
    }
    
    public Paris ParisDataOnDemand.getRandomParis() {
        init();
        Paris obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return pariseService.findParis(id);
    }
    
    public boolean ParisDataOnDemand.modifyParis(Paris obj) {
        return false;
    }
    
    public void ParisDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = pariseService.findParisEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Paris' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Paris>();
        for (int i = 0; i < 10; i++) {
            Paris obj = getNewTransientParis(i);
            try {
                pariseService.saveParis(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
