// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.domain;

import com.guymoyo.domain.SportType;
import com.guymoyo.domain.SportTypeDataOnDemand;
import com.guymoyo.domain.UserAccountDataOnDemand;
import com.guymoyo.service.SportTypeService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SportTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SportTypeDataOnDemand: @Component;
    
    private Random SportTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<SportType> SportTypeDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand SportTypeDataOnDemand.userAccountDataOnDemand;
    
    @Autowired
    SportTypeService SportTypeDataOnDemand.sportTypeService;
    
    public SportType SportTypeDataOnDemand.getNewTransientSportType(int index) {
        SportType obj = new SportType();
        setDescription(obj, index);
        setImage(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void SportTypeDataOnDemand.setDescription(SportType obj, int index) {
        String description = "description_" + index;
        if (description.length() > 255) {
            description = description.substring(0, 255);
        }
        obj.setDescription(description);
    }
    
    public void SportTypeDataOnDemand.setImage(SportType obj, int index) {
        byte[] image = String.valueOf(index).getBytes();
        obj.setImage(image);
    }
    
    public void SportTypeDataOnDemand.setName(SportType obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public SportType SportTypeDataOnDemand.getSpecificSportType(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SportType obj = data.get(index);
        Long id = obj.getId();
        return sportTypeService.findSportType(id);
    }
    
    public SportType SportTypeDataOnDemand.getRandomSportType() {
        init();
        SportType obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return sportTypeService.findSportType(id);
    }
    
    public boolean SportTypeDataOnDemand.modifySportType(SportType obj) {
        return false;
    }
    
    public void SportTypeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = sportTypeService.findSportTypeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SportType' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SportType>();
        for (int i = 0; i < 10; i++) {
            SportType obj = getNewTransientSportType(i);
            try {
                sportTypeService.saveSportType(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
